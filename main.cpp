/*
# üóÇ –ü—Ä–æ—î–∫—Ç: "–û–±–ª—ñ–∫ –ø—Ä–æ—î–∫—Ç—ñ–≤"

## üéØ –ú–µ—Ç–∞:
–ü—Ä–æ–≥—Ä–∞–º–∞ –¥–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏, –∑–±–µ—Ä—ñ–≥–∞—Ç–∏, –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Ç–∞ –ø—Ä–∏–∑–Ω–∞—á–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç–∏ —É—á–∞—Å–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥.

---

## üì¶ –ö–ª–∞—Å–∏ —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞

### 1. –ö–ª–∞—Å `Project`
**üß© –û–ø–∏—Å:**
–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –æ–¥–∏–Ω–∏—á–Ω–∏–π –ø—Ä–æ—î–∫—Ç –∑ –∫–ª—é—á–æ–≤–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏.

**üìå –ü–æ–ª—è:**
- `string name` ‚Äî –Ω–∞–∑–≤–∞ –ø—Ä–æ—î–∫—Ç—É.
- `string description` ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å.
- `string deadline` ‚Äî —Å—Ç—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è (—Ä—è–¥–æ–∫).
- `string status` ‚Äî –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω ("–£ –ø—Ä–æ—Ü–µ—Å—ñ", "–ó–∞–≤–µ—Ä—à–µ–Ω–æ", "–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ").

**üõ† –ú–µ—Ç–æ–¥–∏:**
- `Project(string n, string d, string dl, string s = "–£ –ø—Ä–æ—Ü–µ—Å—ñ")` ‚Äî –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä.
- `string getName() const` ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–∑–≤—É.
- `void print() const` ‚Äî –≤–∏–≤–æ–¥–∏—Ç—å —É—Å—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.

---

### 2. –ö–ª–∞—Å `TeamMember`
**üß© –û–ø–∏—Å:**
–£—á–∞—Å–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏, —è–∫–∏–π –º–æ–∂–µ –±—É—Ç–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–æ –∫—ñ–ª—å–∫–æ—Ö –ø—Ä–æ—î–∫—Ç—ñ–≤.

**üìå –ü–æ–ª—è:**
- `string name` ‚Äî —ñ–º‚Äô—è —á–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∏.
- `string role` ‚Äî –ø–æ—Å–∞–¥–∞ –∞–±–æ —Ä–æ–ª—å.
- `vector<Project*> projects` ‚Äî –≤–µ–∫—Ç–æ—Ä –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏—Ö –ø—Ä–æ—î–∫—Ç—ñ–≤.

**üõ† –ú–µ—Ç–æ–¥–∏:**
- `TeamMember(string n, string r)` ‚Äî –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä.
- `void assignProject(Project* p)` ‚Äî –¥–æ–¥–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç –¥–æ —É—á–∞—Å–Ω–∏–∫–∞.
- `void print() const` ‚Äî –≤–∏–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏—Ö –ø—Ä–æ—î–∫—Ç—ñ–≤.

---

### 3. –ö–ª–∞—Å `ProjectManager`
**üß© –û–ø–∏—Å:**
–ö–µ—Ä—É—î –≤—Å—ñ–º–∞ –ø—Ä–æ—î–∫—Ç–∞–º–∏ –≤ —Å–∏—Å—Ç–µ–º—ñ.

**üìå –ü–æ–ª—è:**
- `vector<Project> projects` ‚Äî —Å–ø–∏—Å–æ–∫ –Ω–∞—è–≤–Ω–∏—Ö –ø—Ä–æ—î–∫—Ç—ñ–≤.

**üõ† –ú–µ—Ç–æ–¥–∏:**
- `void addProject(const Project& p)` ‚Äî –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–æ—î–∫—Ç.
- `void listProjects() const` ‚Äî –≤–∏–≤–µ—Å—Ç–∏ –≤—Å—ñ –ø—Ä–æ—î–∫—Ç–∏.
- `Project* findProject(const string& name)` ‚Äî –∑–Ω–∞–π—Ç–∏ –ø—Ä–æ—î–∫—Ç –∑–∞ –Ω–∞–∑–≤–æ—é.
- `void removeProject(const string& name)` *(–¥–æ–¥–∞—Ç–∫–æ–≤–æ)* ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—î–∫—Ç –∑—ñ —Å–ø–∏—Å–∫—É.

---

### 4. –ö–ª–∞—Å `ProjectDatabase` *(–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)*

**üß© –û–ø–∏—Å:**
–Ü–º—ñ—Ç—É—î –±–∞–∑—É –¥–∞–Ω–∏—Ö —É –ø–∞–º‚Äô—è—Ç—ñ –ø—Ä–æ–≥—Ä–∞–º–∏.

**üìå –ü–æ–ª—è:**
- `vector<Project> storage` ‚Äî —Å–ø–∏—Å–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø—Ä–æ—î–∫—Ç—ñ–≤.

**üõ† –ú–µ—Ç–æ–¥–∏:**
- `void save(const Project& p)` ‚Äî –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–æ—î–∫—Ç.
- `vector<Project> loadAll() const` ‚Äî –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤—Å—ñ –ø—Ä–æ—î–∫—Ç–∏ –∑—ñ —Å—Ö–æ–≤–∏—â–∞.

---

### üõ† –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è:

- ‚úÖ –ö–ª–∞—Å `Date` ‚Äî –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞—Ç–∏ —É –≤–∏–≥–ª—è–¥—ñ `day`, `month`, `year`.
- ‚úÖ –ú–µ–Ω—é –∑ –≤–∏–±–æ—Ä–æ–º –¥—ñ–π (–∫–æ–Ω—Å–æ–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å).
- ‚úÖ –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–Ω—è, —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è, –ø–æ—à—É–∫—É —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø—Ä–æ—î–∫—Ç—ñ–≤.
- ‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É —Ñ–∞–π–ª (`.txt`, `.json`, `.csv` ‚Äî –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ).
- ‚úÖ –ó–≤‚Äô—è–∑–æ–∫ –º—ñ–∂ `TeamMember` —ñ `Project` —á–µ—Ä–µ–∑ –≤–∫–∞–∑—ñ–≤–Ω–∏–∫–∏ (`Project*`).

---

## üìÑ –ö–æ–¥
–û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–Ω–∏–π —É —Ñ–∞–π–ª—ñ `main.cpp`.

---
 */

#include <iostream>
#include <vector>
#include <string>

using namespace std;

// === –ö–ª–∞—Å Project ===
class Project {
private:
    string name;
    string description;
    string deadline;
    string status;

public:
    Project(string n, string d, string dl, string s = "–£ –ø—Ä–æ—Ü–µ—Å—ñ")
        : name(n), description(d), deadline(dl), status(s) {
    }

    string getName() const { return name; }

    void print() const {
        cout << "–ù–∞–∑–≤–∞: " << name << endl;
        cout << "–û–ø–∏—Å: " << description << endl;
        cout << "–î–µ–¥–ª–∞–π–Ω: " << deadline << endl;
        cout << "–°—Ç–∞—Ç—É—Å: " << status << endl;
    }
};

// === –ö–ª–∞—Å TeamMember ===
class TeamMember {
private:
    string name;
    string role;
    vector<Project*> projects;

public:
    TeamMember(string n, string r) : name(n), role(r) {}

    void assignProject(Project* p) {
        projects.push_back(p);
    }

    void print() const {
        cout << "\n–£—á–∞—Å–Ω–∏–∫: " << name << "\n–†–æ–ª—å: " << role << "\n–ü—Ä–æ—î–∫—Ç–∏:\n";
        if (projects.empty()) {
            cout << "  - –ù–µ–º–∞—î –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏—Ö –ø—Ä–æ—î–∫—Ç—ñ–≤\n";
        }
        else {
            for (auto p : projects) {
                cout << "  - " << p->getName() << "\n";
            }
        }
    }
};

// === –ö–ª–∞—Å ProjectManager ===
class ProjectManager {
private:
    vector<Project> projects;

public:
    void addProject(const Project& p) {
        projects.push_back(p);
    }

    void listProjects() const {
        cout << "\n=== –°–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –ø—Ä–æ—î–∫—Ç—ñ–≤ ===\n";
        if (projects.empty()) {
            cout << "–ù–µ–º–∞—î –ø—Ä–æ—î–∫—Ç—ñ–≤.\n";
            return;
        }
        for (const auto& p : projects) {
            p.print();
            cout << "-------------------------\n";
        }
    }

    Project* findProject(const string& name) {
        for (auto& p : projects) {
            if (p.getName() == name)
                return &p;
        }
        return nullptr;
    }
};

// === –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ===
int main() {
    system("chcp 65001 > nul");
    ProjectManager manager;

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—ñ–≤
    Project p1("–°–∞–π—Ç –∫–æ–º–ø–∞–Ω—ñ—ó", "–†–æ–∑—Ä–æ–±–∫–∞ –≤–µ–±—Å–∞–π—Ç—É –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞", "01.07.2025");
    Project p2("–ú–æ–±—ñ–ª—å–Ω–∏–π –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫", "Android-–¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω—É", "15.09.2025", "–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ");

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—ñ–≤ –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager.addProject(p1);
    manager.addProject(p2);

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥–∏
    TeamMember member("–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ", "–†–æ–∑—Ä–æ–±–Ω–∏–∫");

    // –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É —É—á–∞—Å–Ω–∏–∫—É
    Project* found = manager.findProject("–°–∞–π—Ç –∫–æ–º–ø–∞–Ω—ñ—ó");
    if (found) {
        member.assignProject(found);
    }

    // –í–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
    manager.listProjects();
    member.print();

    return 0;
}

